- Class: meta
  Course: PsychMetHCI - Psychological Methods in Human-Computer Interaction; adapted from PSYCH (Psychological Statistics You Can Handle)
  Lesson: Introduction to R
  Author: Robin Welsch
  Type: Standard
  Organization: Aalto University
  Version: 1.0.0
 
#1
- Class: script
  Output: To save the notes for this module, copy and paste the code provided into your RNotebook. Type submit() when you have finished saving these notes. 
  AnswerTests: script_results_identical('saved')
  Hint: "Don't change anything, just type submit(). If you did and you don't know how to fix it, just type skip(), and you'll be all set."
  Script: Notes.R
  
#2
- Class: text
  Output: "In this lesson, we're going to review rStudio. If you are using base R, please download rStudio."

#3
- Class: text
  Output: "The first thing to understand is what you're looking at. We have four corners of rStudio. \n\n The top left is where scripts and files will be uploaded. \n\n The top right is our Environment. This is where our datasets, variables, and functions will be stored. There are other tabs here- history and presentation - that we can ignore. You can see in Environment we have one dataset called data and two values called variable and variable_two. \n\n The bottom left is where we are! This is where we'll be typing the most to interact with this class. Our output - what happens after we give code - also shows here.\n\n The bottom right has a lot of info. Sometimes, plots will display that we'll make under plots. Packages are a ton of different programs others have made - like this package, swirl. If you like games, you might consider packages to be like downloadable content or DLC. Finally, the help tab will show us info about functions. \n\n If you aren't seeing four windows, you might want to look for some horizontal or vertical bars that you can drag and expand to make each window smaller or larger." 

#4
- Class: text
  Output: "So, let's work around these corners." 

#5
- Class: text
  Output: "On the top right, click the arrow next to the word data. If you don't see this, click the Environment tab first. It should expand on the right side and list out five names."
  
#6
- Class: mult_question
  Output: "Which one of these is not listed?"
  AnswerChoices: Sepal.Length;Sepal.Width;Petal.Length;Petal.Width;Species;Color
  CorrectAnswer: Color
  AnswerTests: omnitest(correctVal="Color")
  Hint: "Under data, there are 5 things now. Which one doesn't appear?"

#7
- Class: text
  Output: "These are our variables! This dataset has five variables. You might even have noticed there are 150 observations within this dataset. You can tell this because next to data, there is a second column that says 150 obs. of 5 variables."

#8
- Class: cmd_question
  Output: "Next, we want to explore what the top left is about. So, let's type the following into the Console or the bottom left. It should always go into the Console when I ask you to type things. \n\n This time, type View(data) and hit enter." 
  CorrectAnswer: View(data)
  AnswerTests: omnitest(correctExpr='View(data)')
  Hint: Try typing View(data).

#9
- Class: text
  Output: "Good! Now hit the x next to []data to close it out - you might think of this as a tab in a browser."

#10
- Class: text
  Output: "So what did we just do? We used this function called View() and passed it one argument - data."

#11
- Class: text
  Output: "It opened up a sheet in the top left. It looked like an Excel sheet, in some ways. This is what data looks like when we analyze it. We'll discuss how to set up data in later classes."

#12
- Class: text
  Output: "One important thing is that capitalization is EXTREMELY important in R. If I capitalize something, please be sure to capitalize it as well!"

#13
- Class: text
  Output: "View() (with a capital V) was a function that accepted one argument. If I say a function, it means something with an open and closed parenthesis at the end of it. mean(), for instance. Functions can have many arguments. We separate them by using commas."

#14
- Class: cmd_question
  Output: "For example. Let's take the function rnorm(). This is a function that, given three arguments, will output a list of numbers for us. \n\n We can learn about this function by typing ?rnorm into the Console. Do that now." 
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest(correctExpr='?rnorm')
  Hint: Try typing ?rnorm.

#15
- Class: text
  Output: "On the bottom right, a help file popped up! If you ever have questions on functions, using ? will be useful to you."

#16
- Class: cmd_question
  Output: "Now, as a test, pass three arguments into it. Type rnorm(10, 5, 1)." 
  CorrectAnswer: rnorm(10, 5, 1)
  AnswerTests: omnitest(correctExpr='rnorm(10, 5, 1)')
  Hint: Try typing rnorm(10, 5, 1).

#17
- Class: mult_question
  Output: "Looking at the help file, rnorm() states it has three arguments. When we typed in rnorm(10, 5, 1), what does the 5 represent?"
  AnswerChoices: Mean equal to 5; SD equal to 5; N equal to 5; lower.tail equal to 5; vector of probabilities equal to 5
  CorrectAnswer: Mean equal to 5
  AnswerTests: omnitest(correctVal="Mean equal to 5")
  Hint: "Rnorm()'s usage says n, mean=0, sd=1. The 5 was the second of our inputs."

#18
- Class: cmd_question
  Output: "Right! That was the lazy way. As coders, we always want to be specific and clear about what's going on. So, try again, but type rnorm(n=10, mean=5, sd=1)." 
  CorrectAnswer: rnorm(n=10, mean=5, sd=1)
  AnswerTests: omnitest(correctExpr='rnorm(n=10, mean=5, sd=1)')
  Hint: Try typing rnorm(n=10, mean=5, sd=1).

#19
- Class: text
  Output: "So, the benefit of R is that people have made thousands of packages. Packages are a bunch of functions, like View(), that R didn't have. People coded them and then put them all into a group so we could download them."

#20
- Class: text
  Output: "One of these packages, for example, is swirl."

#21
- Class: text
  Output: "What happens if we downloaded a package that also made its own function called View()? How would R know which to use?"

#22
- Class: text
  Output: "To be the best coders, we will always let R know which packages we're calling these special functions from. For example, We've downloaded a package for you called psych."

#23
- Class: text
  Output: "This package has a handy function called describe(). It does a lot of summary statistics for us."

#24
- Class: cmd_question
  Output: "To call it, type describe() and pass 1 argument into the describe() function, variable_two." 
  CorrectAnswer: describe(variable_two)
  AnswerTests: omnitest(correctExpr='describe(variable_two)')
  Hint: Try typing describe(variable_two).

#25
- Class: text
  Output: "You can explicitly call the package's function by writing packagename::functionname(). So, for example, you also could write psych::describe()." 


#26
- Class: text
  Output: "Note that we can also create our functions. I will sometimes load functions into your workspace for you. They work similarly - FunctionName() and some given arguments."
  
#27
- Class: text
  Output: "However, we almost will never have a variable stored as a Value (see the right-hand side). Variables should always reside in our dataset, and we should always keep them there."

#28
- Class: text
  Output: "And this is one of the most important parts about R - calling variables from a dataset. You have already examined the dataset we loaded via View(data). You saw that it has five columns, or five variables."

#29
- Class: cmd_question 
  Output: "If you wanted to call just one of those variables at any time, say, Sepal.Length, you could type data$Sepal.Length . The first part is the name of the dataset (here, data), and the second part is the name of the variable, here, Sepal.Length, indicated by that dollar sign next to the variable name. Try typing data$Sepal.Length now."
  CorrectAnswer: data$Sepal.Length
  AnswerTests: omnitest(correctExpr='data$Sepal.Length')
  Hint: Try typing data$Sepal.Length

#30
- Class: cmd_question
  Output: "Awesome! Now combine that with what we did with describe(), and have R run the describe function on the variable Sepal.Length in the dataset called data."
  CorrectAnswer: describe(data$Sepal.Length)
  AnswerTests: omnitest(correctExpr='describe(data$Sepal.Length)')
  Hint: Try typing describe(data$Sepal.Length).
  
#31
- Class: text
  Output: "The next thing we need to learn is storing values. We can do this one of two ways - using the equal sign or the <- sign. As we use the equal sign for other things, we will always use the <- storage method. We will always store to the left (<-), but it should be noted that it is indeed possible to store to the right (->), though this is generally not recommended." 

#32
- Class: cmd_question
  Output: "Let's store a new value called class_name. We'll set it to \"PsychMetHCI\" Try this now."
  CorrectAnswer: class_name <- "PsychMetHCI"
  AnswerTests: omnitest(correctExpr='class_name <- "PsychMetHCI"')
  Hint: Try typing class_name <- "PsychMetHCI". 

#33
- Class: text
  Output: "You can see on the top right, in our Environment, that we've created a new value called class_name."

#34
- Class: text
  Output: "What if we spelled it wrong? Or we wanted to change it to say the class name was Introduction to R?"

#35
- Class: text
  Output: "We can go back into the Console and click inside. Now, hit the up arrow key. If you did this correctly, the last thing you typed in should appear. So, for our purposes, class_name <- \"Psychology\"."

#36
- Class: cmd_question
  Output: "Once you've pulled up the last thing we typed, change class_name to be equal to \"Introduction to R\"."
  CorrectAnswer: class_name <- "Introduction to R"
  AnswerTests: omnitest(correctExpr='class_name <- "Introduction to R"')
  Hint: Try typing class_name <- "Introduction to R". 

#37
- Class: text
  Output: The last thing we need to learn about R for now is that different data is stored differently. We notice in our data that Sepal.Length has the word num next to it.

#38
- Class: text
  Output: This means that it is data that is understood as numbers. Its 'class' is numeric. We can do mathematical functions to numeric class objects.

#39
- Class: text
  Output: There is also the integer class, which is a number but has no decimal points. 

#40
- Class: text
  Output: Species are of a class called factor. These are typically things like our independent variables - gender, hair color, treatment or not. We don't do much math with factors on their own - but of course, they are critical for us to run our statistics and consider how some variable differs due to some factor.

#41
- Class: cmd_question
  Output: The class_name value we just created was words, right? We call these characters. Use the function class(), and pass it one argument, class_name.
  CorrectAnswer: class(class_name)
  AnswerTests: omnitest(correctExpr='class(class_name)')
  Hint: class(class_name)

#42
- Class: text
  Output: Finally, we have things called lists. If we look at variable_two, we notice how it has the class integer. But it says it's from [1:100].

#43
- Class: text
  Output: That means there's a list of 100 different integers. We create lists using the c() function.

#44
- Class: cmd_question
  Output: Pass three arguments into the function c() - "I", "Love", and "R", and store it as name.
  CorrectAnswer: name <- c("I", "Love", "R")
  AnswerTests: expr_creates_var('name'); omnitest(correctExpr='name <- c("I", "Love", "R")')
  Hint: name <- c("I", "Love", "R")

#45
- Class: text
  Output: Notice how I had you put quotes around the words. This is critically important - There is an essential difference between "Dr. C" and Dr. C. If we're writing any text into our dataset, we want to use quotes. If we are referring to some variable, we opt out of quotes. 

#46
- Class: text
  Output: "Now, let's review what we've learned about R."

#47
- Class: mult_question
  Output: "There are a few ways to store a value in R. We discussed two. However, in this class, which way will we store values?"
  AnswerChoices: ValueName <- Input;ValueName = Input; ValueName == Input; ValueName -> Input
  CorrectAnswer: ValueName <- Input
  AnswerTests: omnitest(correctVal="ValueName <- Input")
  Hint: "Two of these answers are correct. But, for ease, we want only to use one. Which one?"

#48
- Class: mult_question
  Output: "What are things like View(), describeBy(), and plot() called?"
  AnswerChoices: Factors;Values;Functions;Parenthesis
  CorrectAnswer: Functions
  AnswerTests: omnitest(correctVal="Functions")
  Hint: "If we see some text followed by a (), it means something specific."

#49
- Class: mult_question
  Output: "In these functions, what are the things called that we put inside of the ()?"
  AnswerChoices: Arguments;Topics;Values;Details
  CorrectAnswer: Arguments
  AnswerTests: omnitest(correctVal="Arguments")
  Hint: "We discussed how View() had one __, but rnorm() had three of them. Look at your help file for rnorm."

#50
- Class: mult_question
  Output: "If we have multiple arguments in one function, how do we separate them?"
  AnswerChoices: Commas;Semi-colons;Colons;Exclamation Marks;R just knows
  CorrectAnswer: Commas
  AnswerTests: omnitest(correctVal="Commas")
  Hint: "Look at the help file for rnorm(). How do they list the different inputs?"

#51
- Class: mult_question
  Output: "If I say call popquiz::secretFunction(), what is 'popquiz'?"
  AnswerChoices: The name of the function;The name of the package;The name I called it; The name of the first argument
  CorrectAnswer: The name of the package
  AnswerTests: omnitest(correctVal="The name of the package")
  Hint: "describe() could be written as psych::describe()."

#52
- Class: text
  Output: "Alright! That's about everything! We will frequently say take function X() and pass it three arguments, so you will want to ensure you understand what I'm saying!"
