- Class: meta
  Course: Psychological Statistics You Can Handle
  Lesson: GGPlots - Grouped Bar Charts
  Author: Kevin R. Carriere & Jason Kilgore
  Type: Standard
  Organization: Washington & Jefferson College
  Version: 3.0.0
#1

- Class: script
  Output: Here are some notes for this module. When you've saved the notes, type submit().
  AnswerTests: script_results_identical('saved')
  Hint: Make sure the last line in your script says saved <- "Y".
  Script: Notes.R
  
#2
- Class: text
  Output: In this module, we will focus on how to create grouped bar charts. This is the classic chart that is shown in many psychology journals. To complete this, you should review Basic Tidyverse Verbs to remember group_by() and summarise().
  #3
- Class: text
  Output: We will talk through a lot of modifications as well that you can make. Remember, you can always play on your own with play(), but follow our instructions while learning here.
#4
- Class: figure
  Output: In this module, we will replicate Figure 1 in Grossmann & Kross, 2014. We'll get close to making it perfect.
  Figure: finalanswer.R
  FigureType: new
  
#5
- Class: text
  Output: The full citation for this figure is Grossmann, I., & Kross, E. (2014). Exploring Solomon’s Paradox - Self-Distancing Eliminates the Self-Other Asymmetry in Wise Reasoning About Close Relationships in Younger and Older Adults. Psychological Science, 25(8), 1571–1580. doi.org/10.1177/0956797614535400

#6 
- Class: cmd_question
  Output: Let's start by looking at the data leading us to this figure. Pipe (|>) Paradox into head().
  CorrectAnswer: Paradox |> head()
  AnswerTests: omnitest(correctExpr='Paradox |> head()')
  Hint: Paradox |> head()
  
#7
- Class: text
  Output: So, we have three columns. Two, representing both experimental factors and the dependent variable we are plotting is a score on some writing they did in a study.
  
#8
- Class: text
  Output: To make a grouped bar chart, we want to summarise our data into two primary columns- the means and what we want to plot for whiskers (here, the standard errors).

#9
- Class: script
  Output: Let's use dplyr to create this summary data. We have loaded a script for you. Work on it now. When you're ready, type submit().
  AnswerTests: script_results_identical('p_sum')
  Hint: "Does yours look like this -  p_sum <- Paradox |> group_by(Target, Perspective) |> summarise(mean = mean(Wisdom, na.rm=TRUE), sd = sd(Wisdom, na.rm=TRUE), n = sum(!is.na(Wisdom)), se = sd/sqrt(n)? "
  Script: summarise.R
  
#10
- Class: cmd_question
  Output: Let's start by setting up our ggplot space. Take your new dataframe, psum, and pipe (|>) it into ggplot(). ggplot() will take one argument. The argument, aes(), is a function so that it will take three arguments. aes() stands for aesthetics - what do we want our plot to look like? Well, we want the x-axis to be the factor of Target (x=Target), we want the y-axis to be the new response variable (we called it mean), and we want to fill our colors with the other factor, Perspective (fill=Perspective). Enter that now.
  CorrectAnswer: p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))
  AnswerTests: omnitest(correctExpr='p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))')
  Hint: Maybe you got tripped up where everything goes? Try p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))
  
#11
- Class: cmd_question
  Output: Great. Notice that fill=Perspective has not shown itself yet - no fret, it will. From now on, we will be adding layers to this plot. Since they are layers, the order could matter. For example, we want the bars plotted first, and then the whiskers, so that the whiskers are on top of the bars. So, let's start there. Hit up on your keyboard, and at the end of your work, type + and then write geom_col() for a column-based geom.
  CorrectAnswer: p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+geom_col()
  AnswerTests: omnitest(correctExpr='p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+geom_col()')
  Hint: Try p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+geom_col()
  
#12
- Class: cmd_question
  Output: Hit up again! Inside of geom_col, we want to add four arguments. While fill= focuses on the inside of objects, color= focuses on the outside. We want the outside color (the shape outline) to be "black". How might we do that? Next, we'll set the width equal to 0.5 and the linewidth equal to 0.2. Linewidth references the shape's outline, while width references the shape itself. Finally, add the final argument position=position_dodge(.5).
  CorrectAnswer: p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+ geom_col(color="black",  width=0.5, linewidth=.2, position=position_dodge(.5))
  AnswerTests: omnitest(correctExpr='p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+ geom_col(color="black",  width=0.5, linewidth=.2, position=position_dodge(.5))')
  Hint: Try p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+ geom_col(color="black",  width=0.5, linewidth=.2, position=position_dodge(.5))
  
#13
- Class: text
  Output: One-third of the way there! Already, it's looking a lot more like what we were expecting. That position=position_dodge() separated everything for us, and the .5 adds extra padding between Self and Other.
  
#14
- Class: cmd_question
  Output: Hit up again! Let's make those colors correct. Now, since we know we want to change the fill, we can do this by adding (+) a new layer called scale_fill_manual(), which will take the argument values=, and it will equal a list c() of two things, "darkgrey" and "white". 
  CorrectAnswer: p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+ geom_col(color="black",  width=0.5, linewidth=.2, position=position_dodge(.5)) + scale_fill_manual(values=c("darkgrey", "white"))
  AnswerTests: omnitest(correctExpr='p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+ geom_col(color="black",  width=0.5, linewidth=.2, position=position_dodge(.5)) + scale_fill_manual(values=c("darkgrey", "white"))')
  Hint: Try p_sum |> ggplot(aes(x=Target, y=mean, fill=Perspective))+ geom_col(color="black",  width=0.5, linewidth=.2, position=position_dodge(.5)) + scale_fill_manual(values=c("darkgrey", "white"))
  
#15
- Class: text
  Output: Great job. This ggplot call is getting a bit long. Let's switch to scripts.
  
#16
- Class: script
  Output: We've loaded the first ggplot script. Read and keep working on it. When you're ready, save and type submit().
  AnswerTests: plot_results_identical('plot')
  Hint: Follow the instructions! 
  Script: ggplot1.R
  
#17
- Class: cmd_question
  Output: Output what you've done so far by typing plot into the console.
  AnswerTests: omnitest(correctExpr='plot')
  CorrectAnswer: plot
  Hint: Type plot. 
  
#18
- Class: script
  Output: We've loaded the second ggplot script. Read and keep working on it. When you're ready, save and type submit().
  AnswerTests: plot_results_identical('plot')
  Hint: Follow the instructions! 
  Script: ggplot2.R
  
#19
- Class: cmd_question
  Output: Output what you've done so far  by typing plot into the console.
  AnswerTests: omnitest(correctExpr='plot')
  CorrectAnswer: plot
  Hint: Type plot.

#20
- Class: script
  Output: We've loaded the third ggplot script. Read and keep working on it. When you're ready, save and type submit().
  AnswerTests: plot_results_identical('plot')
  Hint: Follow the instructions! 
  Script: ggplot3.R
  
#21
- Class: cmd_question
  Output: Output what you've done by typing plot into the console.
  AnswerTests: omnitest(correctExpr='plot')
  CorrectAnswer: plot
  Hint: Type plot.

#22
- Class: script
  Output: We've loaded the fourth ggplot script. Read and keep working on it. When you're ready, save and type submit().
  AnswerTests: plot_results_identical('plot')
  Hint: Follow the instructions! 
  Script: ggplot4.R
  
#23
- Class: cmd_question
  Output: Output what you've done by typing plot into the console.
  AnswerTests: omnitest(correctExpr='plot')
  Hint: Type plot.
  CorrectAnswer: plot
  
#24
- Class: script
  Output: We've loaded the fifth ggplot script. We added a few extra things - feel free to read it and figure out what we did, but there's nothing for you to add. When you're ready, save and type submit().
  AnswerTests: plot_results_identical('plot')
  Hint: Follow the instructions! 
  Script: ggplot5.R
  
#25
- Class: cmd_question
  Output: Output what you've done by typing plot into the console.
  AnswerTests: omnitest(correctExpr='plot')
  CorrectAnswer: plot
  Hint: Type plot

#26
- Class: text
  Output: You've done it! Whew. Hopefully, you can see how customizable ggplot can be, and you've learned some basics (geom_col and geom_errorbar) and more advanced (themes, all the themes!) ways to change ggplot2 around.
  
  

