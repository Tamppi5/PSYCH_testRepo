- Class: meta
  Course: PSYCH - Psychological Statistics You Can Handle
  Lesson: Pivoting Data
  Author: Kevin R. Carriere & Jason Kilgore
  Type: Standard
  Organization: Washington & Jefferson College
  Version: 3.0.0

#1
- Class: script
  Output: To save the notes for this module, copy and paste the code provided into your RNotebook. Type submit() when you have finished saving these notes. 
  AnswerTests: script_results_identical('saved')
  Hint: "Don't change anything, just type submit(). If you did and you don't know how to fix it, just type skip(), and you'll be all set."
  Script: Notes.R

- Class: text
  Output: Pivoting data is essential to upgrading your R coding knowledge.
  
- Class: text
  Output: When discussing pivoting data, we mean reshaping data --- turning some columns into additional rows or adding more columns and reducing the number of rows.

- Class: text
  Output: When we add columns, we add more columns to the right of the data. In this way, we are making our data wider.
  
- Class: text
  Output: When we add rows, we reduce the number of columns and add more rows to the data. In this way, we are making our data longer.
  
- Class: text
  Output: In tidyr, two functions, pivot_wider() and pivot_longer(), serve these purposes. 
  
- Class: text
  Output: We will start with pivot_longer(). You will most commonly face pivoting longer when dealing with a study of repeated measures - when you ask a participant to respond to the same question at multiple time points or under different conditions. 
 
- Class: text
  Output: The first study comes from Imada et al. (2022). They present participants with someone looking for help to load a sofa into a van. Some participants were told that if someone were to help the person, that helper would receive 50 cents ($0.50), which they called a low cash payment. Others were told the helper would receive $5, which they called a medium cash payment. Others were told that the helper would not receive a payment for helping (With mention of control), and others were told nothing about the payment (Without mention of control). They also tested to see if it was sweets (candy or chocolate) instead of cash, but we won't analyze those. Based on this information, participants were asked how much they expected people to help this poor sofa-moving soul.
  
- Class: text
  Output: The citation is Imada, H., Chan, W. F., Ng, Y. K., Man, L. H., Wong, M. S., Cheng, B. L., & Feldman, G. (2022). Rewarding More Is Better for Soliciting Help, Yet More So for Cash Than for Goods- Revisiting and Reframing the Tale of Two Markets With Replications and Extensions of Heyman and Ariely (2004). Collabra- Psychology, 8(1), 32572. doi.org/10.1525/collabra.32572
  
- Class: cmd_question
  Output: To do this, we have loaded a dataset from the Repeated Measures ANOVA module before we fixed it up. Check the variables in the dataset by piping the dataset name HeymanWide, into names().
  CorrectAnswer: HeymanWide |> names()
  AnswerTests: omnitest(correctExpr='HeymanWide |> names()')
  Hint: Try HeymanWide |> names().

- Class: text
  Output: Great. So, there are nine columns. One, ResponseId, identifies the participant. The other eight columns are the different conditions to which each participant was exposed. Remember, a tidy dataset should have one row per observation - equal to each participant having eight rows since we observed them in eight different conditions. 

- Class: text
  Output: The great thing about pivot_longer is that it is highly flexible. There are many ways we can pivot the data. We'll start by considering three key arguments in pivot_longer -- cols, names_to, and values_to. 

- Class: text
  Output: cols takes a list of columns to pivot. You also can tell it a list of columns NOT to pivot using -. How many variables you have depends on what you should use. 
 
- Class: text
  Output: Next, consider what pivot_longer is doing. It will create one column that serves as a factor with as many levels as pivoted columns. The names_to="" argument will define what we call that column.

- Class: text
  Output: It also creates a column that will be the values pulled out from the cell from the column that was just named. We define how we name that column in the values_to="" argument.
  
- Class: script
  Output: Let's try pivoting the wide data into the long format. We've loaded a script for you to work with. When you're ready, save your script and type submit().
  AnswerTests: script_results_identical('HeymanLong')
  Hint: 'HeymanLong <- HeymanWide |> pivot_longer(cols = -"ResponseId", names_to = "Condition", values_to = "PHelp")'
  Script: pivotlonger.R

- Class: cmd_question
  Output: Great job. Let's view this new data by piping our newly created dataset, HeymanLong, into head(10).
  CorrectAnswer: HeymanLong |> head(10)
  AnswerTests: omnitest(correctExpr="HeymanLong |> head(10)")
  Hint: Try HeymanLong |> head(10)

- Class: text
  Output: The notes walk through a few more examples of how pivoting might be necessary for your data, including shortcuts to selecting columns (starts_with(c("Pre", "Post"))) and when you might have multiple variables you want to pivot (a pre/post measure of likelihood and a pre/post measure of guilt).

- Class: text
  Output: pivot_wider() does the reverse - it takes data and creates multiple columns based on that data. 
  
- Class: text
  Output: Imagine, for instance, you are working with someone who wants to analyze the data in Jamovi or SPSS. This would require that the data be *wide*, not long. And imagine you only had HeymanLong to give them. How could we turn it back to the wide format?
  
- Class: text
  Output: The basic pivot_wider has a sister set of arguments to pivot_longer. While pivot_longer() took id=, names_to=, values_to=, pivot_wider takes id_cols=, names_from=, values_from=. 
  
- Class: script
  Output: Let's try re-pivoting the long data back into wide. When you're ready, save your script and type submit().
  AnswerTests: script_results_identical('HeymanWide2')
  Hint: 'HeymanWide2 <- HeymanLong |> pivot_wider(id_cols = "ResponseId", names_from = "Condition", values_from = "PHelp")'
  Script: pivotwider.R


- Class: text
  Output: pivot_longer() and pivot_wider() are two workhorse functions for data scientists. The notes go through a few other examples of how you can use different functions to manipulate your data into the exact form you want. Combine this Module with Basic Tidyverse Verbs to really get a strong handle on coding in R.
  

